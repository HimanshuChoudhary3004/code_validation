file_extension,original_code,enhancement_prompt,enhanced_code,functional_correctness_score,functional_correctness_explanation,maintainability_score,maintainability_explanation,code_smells_score,code_smells_explanation,hallucination_score,hallucination_explanation,technical_bias_score,technical_bias_explanation,inherent_bias_score,inherent_bias_explanation,cyclomatic_complexity_score,cyclomatic_complexity_explanation,cognitive_complexity_score,cognitive_complexity_explanation
abap,WRITE: 'Total Amount'.,Format the output with currency symbol and proper number format,"DATA: lv_amount TYPE p DECIMALS 2 VALUE '1234.56'.
WRITE: / 'Total Amount: $', lv_amount USING EDIT MASK '__.___.__9.99'.",0.0,"{'task_coverage': 1.0, 'logic_validity': 1.0, 'syntax_correctness': 1.0, '_final_score_calc': '1 - (0.4*1.0 + 0.4*1.0 + 0.2*1.0) = 1 - 1.0 = 0.0', '_explanation': {'task_coverage': 'The enhancement correctly formats the output with a currency symbol and proper number format as requested.', 'logic_validity': 'The logic is valid and correctly implements the enhancement goal without altering the intended behavior.', 'syntax_correctness': 'The enhanced code is syntactically correct and compiles without errors.'}, 'score': 0.0}",0.44,"{'modularity': 0.5, 'readability': 0.7, 'comment_quality': 0.3, 'naming_conventions': 0.8, '_final_score_calc': '1 - (0.3*0.5 + 0.3*0.7 + 0.2*0.3 + 0.2*0.8) = 1 - 0.56 = 0.44', '_explanation': {'modularity': 'The code remains simple and does not require modularization.', 'readability': 'The enhancement improves readability by formatting the output, but the use of an edit mask might be less intuitive for some developers.', 'comment_quality': 'No comments were added to explain the use of the edit mask.', 'naming_conventions': ""The variable name 'lv_amount' is descriptive and follows naming conventions.""}, 'score': 0.44}",0.0,"{'redundant_code': 0.0, 'deep_nesting': 0.0, 'unused_variables': 0.0, 'long_functions': 0.0, '_final_score_calc': '0.3*0.0 + 0.2*0.0 + 0.25*0.0 + 0.25*0.0 = 0.0', '_explanation': {'redundant_code': 'No redundant code was introduced; the enhancement is concise.', 'deep_nesting': 'No deep nesting present in the original or enhanced code.', 'unused_variables': 'All declared variables are used appropriately.', 'long_functions': 'The code is not part of a function, and the enhancement is straightforward.'}, 'score': 0.0}",0.0,"{'out_of_context_code': 0.0, 'imaginary_functions_or_packages': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'out_of_context_code': 'The enhancement directly addresses the prompt without adding unrelated logic.', 'imaginary_functions_or_packages': 'No imaginary functions or packages were used; the enhancement uses standard ABAP syntax.'}, 'score': 0.0}",0.0,"{'style_bias': 0.0, 'framework_bias': 0.0, 'paradigm_bias': 0.0, '_final_score_calc': '0.4*0.0 + 0.3*0.0 + 0.3*0.0 = 0.0', '_explanation': {'style_bias': 'No stylistic changes were made beyond the enhancement prompt.', 'framework_bias': 'No framework-related decisions were introduced.', 'paradigm_bias': 'No paradigm shifts were made; the enhancement is consistent with the original procedural approach.'}, 'score': 0.0}",0.5,"{'biased_variable_names': 0.0, 'biased_comments_or_texts': 1.0, '_final_score_calc': '0.5*0.0 + 0.5*1.0 = 0.5', '_explanation': {'biased_variable_names': 'No biased variable names introduced.', 'biased_comments_or_texts': ""The use of '$' assumes a specific currency, which can be culturally biased.""}, 'score': 0.5}",0.1,"{'cyclomatic_complexity': 0.1, '_explanation': 'The enhancement added a simple data declaration and a formatted WRITE statement, which does not significantly increase branch complexity.', 'score': 0.1}",0.2,"{'cognitive_complexity': 0.2, '_explanation': 'The enhancement introduces a new variable and a formatting mask, which slightly increases cognitive load. However, the code remains straightforward with minimal mental effort required to understand the changes.', 'score': 0.2}"
sql,SELECT name FROM vendors;,Filter only active vendors and order alphabetically,SELECT name FROM vendors WHERE status = 'active' ORDER BY name ASC;,0.0,"{'task_coverage': 1.0, 'logic_validity': 1.0, 'syntax_correctness': 1.0, '_final_score_calc': '1 - (0.4*1.0 + 0.4*1.0 + 0.2*1.0) = 1 - 1.0 = 0.0', '_explanation': {'task_coverage': 'The enhancement successfully filters for active vendors and orders the results alphabetically, fully covering the prompt requirements.', 'logic_validity': 'The logic is valid as it correctly implements the filtering of active vendors and orders them by name.', 'syntax_correctness': 'The SQL syntax is correct and will execute without errors.'}, 'score': 0.0}",0.33,"{'modularity': 1.0, 'readability': 0.9, 'comment_quality': 0.0, 'naming_conventions': 1.0, '_final_score_calc': '1 - (0.3*1.0 + 0.3*0.9 + 0.2*0.0 + 0.2*1.0) = 1 - 0.67 = 0.33', '_explanation': {'modularity': 'The query remains a single statement, which is appropriate for its complexity.', 'readability': 'The addition of the WHERE clause and ORDER BY improves clarity but slightly increases complexity.', 'comment_quality': 'No comments were present in the original or enhanced code.', 'naming_conventions': 'No changes to naming conventions were necessary or made.'}, 'score': 0.33}",0.0,"{'redundant_code': 0.0, 'deep_nesting': 0.0, 'unused_variables': 0.0, 'long_functions': 0.0, '_final_score_calc': '0.3*0.0 + 0.2*0.0 + 0.25*0.0 + 0.25*0.0 = 0.0', '_explanation': {'redundant_code': 'No redundant code was added; the enhancement is concise.', 'deep_nesting': 'No nesting is present in the SQL query.', 'unused_variables': 'There are no variables in the SQL query.', 'long_functions': 'The SQL query is a single statement and not a function.'}, 'score': 0.0}",0.0,"{'out_of_context_code': 0.0, 'imaginary_functions_or_packages': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'out_of_context_code': 'The enhancement directly addresses the prompt without adding unrelated logic.', 'imaginary_functions_or_packages': 'No imaginary functions or packages were used; the enhancement uses standard SQL syntax.'}, 'score': 0.0}",0.0,"{'style_bias': 0.0, 'framework_bias': 0.0, 'paradigm_bias': 0.0, '_final_score_calc': '0.4*0.0 + 0.3*0.0 + 0.3*0.0 = 0.0', '_explanation': {'style_bias': 'No stylistic changes were made.', 'framework_bias': 'No framework-specific changes were introduced.', 'paradigm_bias': 'No paradigm shifts were made.'}, 'score': 0.0}",0.0,"{'biased_variable_names': 0.0, 'biased_comments_or_texts': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'biased_variable_names': 'No biased variable names introduced.', 'biased_comments_or_texts': 'No biased comments or texts introduced.'}, 'score': 0.0}",1.0,"{'cyclomatic_complexity': 1.0, '_explanation': 'The enhancement added a simple WHERE clause and an ORDER BY clause, which slightly increases complexity but remains straightforward.', 'score': 1.0}",0.2,"{'cognitive_complexity': 0.2, '_explanation': 'The enhancement introduces a WHERE clause and an ORDER BY clause, which are straightforward SQL constructs. The added complexity is minimal as it involves basic filtering and sorting.', 'score': 0.2}"
plsql,SELECT * FROM orders;,Convert this into a stored procedure that logs each order ID to console,"CREATE OR REPLACE PROCEDURE log_orders IS
BEGIN
  FOR rec IN (SELECT * FROM orders) LOOP
    DBMS_OUTPUT.PUT_LINE('Order ID: ' || rec.order_id);
  END LOOP;
END;",0.0,"{'task_coverage': 1.0, 'logic_validity': 1.0, 'syntax_correctness': 1.0, '_final_score_calc': '1 - (0.4*1.0 + 0.4*1.0 + 0.2*1.0) = 1 - 1.0 = 0.0', '_explanation': {'task_coverage': 'The enhancement successfully converts the SELECT statement into a stored procedure and logs each order ID to the console as requested.', 'logic_validity': 'The logic is valid as it iterates over each order and outputs the order ID, which matches the enhancement prompt.', 'syntax_correctness': 'The syntax is correct for creating a stored procedure in PL/SQL, and it uses DBMS_OUTPUT.PUT_LINE correctly to log the order IDs.'}, 'score': 0.0}",0.29,"{'modularity': 0.9, 'readability': 0.8, 'comment_quality': 0.3, 'naming_conventions': 0.9, '_final_score_calc': '1 - (0.3*0.9 + 0.3*0.8 + 0.2*0.3 + 0.2*0.9) = 1 - 0.71 = 0.29', '_explanation': {'modularity': 'The code is now encapsulated in a stored procedure, improving modularity.', 'readability': 'The procedure is straightforward, but lacks comments for clarity.', 'comment_quality': 'No comments were added to explain the procedure.', 'naming_conventions': 'The procedure name is descriptive, but no new variables were introduced.'}, 'score': 0.29}",0.0,"{'redundant_code': 0.0, 'deep_nesting': 0.0, 'unused_variables': 0.0, 'long_functions': 0.0, '_final_score_calc': '0.3*0.0 + 0.2*0.0 + 0.25*0.0 + 0.25*0.0 = 0.0', '_explanation': {'redundant_code': 'The enhancement does not introduce any redundant code. The loop iterates over each order and logs the order ID, which is necessary for the task.', 'deep_nesting': 'There is no deep nesting in the enhanced code. The loop structure is simple and straightforward.', 'unused_variables': ""There are no unused variables in the enhanced code. The loop variable 'rec' is used to access the order ID."", 'long_functions': 'The procedure is concise and performs a single task, which is logging order IDs.'}, 'score': 0.0}",0.0,"{'out_of_context_code': 0.0, 'imaginary_functions_or_packages': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'out_of_context_code': 'The enhancement directly addresses the prompt without adding unnecessary logic.', 'imaginary_functions_or_packages': 'The use of DBMS_OUTPUT.PUT_LINE is appropriate and standard for logging to console in Oracle PL/SQL.'}, 'score': 0.0}",0.0,"{'style_bias': 0.0, 'framework_bias': 0.0, 'paradigm_bias': 0.0, '_final_score_calc': '0.4*0.0 + 0.3*0.0 + 0.3*0.0 = 0.0', '_explanation': {'style_bias': 'No stylistic changes were made.', 'framework_bias': 'No framework changes were made.', 'paradigm_bias': 'The enhancement correctly converted the query into a stored procedure as requested.'}, 'score': 0.0}",0.0,"{'biased_variable_names': 0.0, 'biased_comments_or_texts': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'biased_variable_names': 'No biased variable names introduced.', 'biased_comments_or_texts': 'No biased comments or texts introduced.'}, 'score': 0.0}",1.0,"{'cyclomatic_complexity': 1.0, '_explanation': 'The enhancement introduces a loop structure, which increases the cyclomatic complexity from 1 to 2. However, this increase is proportional to the added functionality.', 'score': 1.0}",0.3,"{'cognitive_complexity': 0.3, '_explanation': 'The enhancement introduces a loop and a procedure structure, which slightly increases the mental effort required to understand the code. However, the logic is straightforward and the naming is clear, keeping the complexity low.', 'score': 0.3}"
abap,SELECT * FROM sflight INTO TABLE lt_sflight.,Restrict to flights with seats available and limit to 10 rows,SELECT * FROM sflight INTO TABLE lt_sflight WHERE seatsmax > seatsocc UP TO 10 ROWS.,0.0,"{'task_coverage': 1.0, 'logic_validity': 1.0, 'syntax_correctness': 1.0, '_final_score_calc': '1 - (0.4*1.0 + 0.4*1.0 + 0.2*1.0) = 1 - 1.0 = 0.0', '_explanation': {'task_coverage': 'The enhancement correctly restricts the selection to flights with available seats and limits the result to 10 rows.', 'logic_validity': 'The logic is valid as it correctly checks for available seats and applies the row limit.', 'syntax_correctness': 'The enhanced code is syntactically correct and will compile without errors.'}, 'score': 0.0}",0.49,"{'modularity': 0.0, 'readability': 0.9, 'comment_quality': 0.0, 'naming_conventions': 1.0, '_final_score_calc': '1 - (0.3*0.0 + 0.3*0.9 + 0.2*0.0 + 0.2*1.0) = 1 - 0.51 = 0.49', '_explanation': {'modularity': 'No change in modularity as the enhancement is a simple query modification.', 'readability': ""The enhancement adds a condition and a limit, which are clear and improve the query's purpose."", 'comment_quality': 'No comments were present in the original code, and none were added.', 'naming_conventions': 'No new variables were introduced, so naming conventions remain consistent.'}, 'score': 0.49}",0.0,"{'redundant_code': 0.0, 'deep_nesting': 0.0, 'unused_variables': 0.0, 'long_functions': 0.0, '_final_score_calc': '0.3*0.0 + 0.2*0.0 + 0.25*0.0 + 0.25*0.0 = 0.0', '_explanation': {'redundant_code': 'No redundant code is present in the enhanced code.', 'deep_nesting': 'There is no nesting in the SQL query.', 'unused_variables': 'All variables used in the query are necessary.', 'long_functions': 'The SQL statement is concise and not part of a long function.'}, 'score': 0.0}",0.0,"{'out_of_context_code': 0.0, 'imaginary_functions_or_packages': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'out_of_context_code': 'The enhancement directly addresses the prompt requirements without adding unrelated logic.', 'imaginary_functions_or_packages': 'No imaginary functions or packages were introduced.'}, 'score': 0.0}",0.0,"{'style_bias': 0.0, 'framework_bias': 0.0, 'paradigm_bias': 0.0, '_final_score_calc': '0.4*0.0 + 0.3*0.0 + 0.3*0.0 = 0.0', '_explanation': {'style_bias': 'No stylistic changes were made.', 'framework_bias': 'No framework changes were introduced.', 'paradigm_bias': 'No paradigm shifts were applied.'}, 'score': 0.0}",0.0,"{'biased_variable_names': 0.0, 'biased_comments_or_texts': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'biased_variable_names': 'No biased variable names introduced.', 'biased_comments_or_texts': 'No biased comments or texts introduced.'}, 'score': 0.0}",0.2,"{'cyclomatic_complexity': 0.2, '_explanation': 'Enhancement added a simple WHERE clause and a row limit, slightly increasing complexity.', 'score': 0.2}",0.2,"{'cognitive_complexity': 0.2, '_explanation': 'The enhancement introduces a WHERE clause and a row limit, which slightly increases the cognitive load, but the structure remains simple and clear.', 'score': 0.2}"
sql,UPDATE employees SET bonus = 1000;,Update bonuses only for employees with performance rating 'A',UPDATE employees SET bonus = 1000 WHERE performance_rating = 'A';,0.0,"{'task_coverage': 1.0, 'logic_validity': 1.0, 'syntax_correctness': 1.0, '_final_score_calc': '1 - (0.4*1.0 + 0.4*1.0 + 0.2*1.0) = 1 - 1.0 = 0.0', '_explanation': {'task_coverage': ""The enhancement correctly adds a condition to update bonuses only for employees with a performance rating of 'A', fully covering the task requirement."", 'logic_validity': 'The logic is valid as it correctly applies the condition to filter employees based on their performance rating.', 'syntax_correctness': 'The SQL syntax is correct and will execute without errors.'}, 'score': 0.0}",0.5,"{'modularity': 0.0, 'readability': 1.0, 'comment_quality': 0.0, 'naming_conventions': 1.0, '_final_score_calc': '1 - (0.3*0.0 + 0.3*1.0 + 0.2*0.0 + 0.2*1.0) = 1 - 0.5 = 0.5', '_explanation': {'modularity': 'No change in modularity as the code is a single SQL statement.', 'readability': 'Readability improved by adding a condition that clarifies the intent.', 'comment_quality': 'No comments were present or added.', 'naming_conventions': 'No change in naming conventions as no new variables were introduced.'}, 'score': 0.5}",0.0,"{'redundant_code': 0.0, 'deep_nesting': 0.0, 'unused_variables': 0.0, 'long_functions': 0.0, '_final_score_calc': '0.3*0.0 + 0.2*0.0 + 0.25*0.0 + 0.25*0.0 = 0.0', '_explanation': {'redundant_code': 'No redundant code present in the original or enhanced code.', 'deep_nesting': 'No deep nesting present in the original or enhanced code.', 'unused_variables': 'No variables are declared, so none are unused.', 'long_functions': 'The statement is a single line and not part of a function.'}, 'score': 0.0}",0.0,"{'out_of_context_code': 0.0, 'imaginary_functions_or_packages': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'out_of_context_code': 'The enhancement directly addresses the prompt without adding unnecessary logic.', 'imaginary_functions_or_packages': 'No imaginary functions or packages were introduced.'}, 'score': 0.0}",0.0,"{'style_bias': 0.0, 'framework_bias': 0.0, 'paradigm_bias': 0.0, '_final_score_calc': '0.4*0.0 + 0.3*0.0 + 0.3*0.0 = 0.0', '_explanation': {'style_bias': 'No stylistic changes were made.', 'framework_bias': 'No framework changes were introduced.', 'paradigm_bias': 'No paradigm changes were made.'}, 'score': 0.0}",0.0,"{'biased_variable_names': 0.0, 'biased_comments_or_texts': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'biased_variable_names': 'No biased variable names introduced.', 'biased_comments_or_texts': 'No biased comments or texts introduced.'}, 'score': 0.0}",0.9,"{'cyclomatic_complexity': 1.0, '_explanation': 'Enhancement added a simple condition, increasing complexity slightly.', 'score': 0.9}",0.1,"{'cognitive_complexity': 0.1, '_explanation': 'The enhancement introduces a simple WHERE clause to filter employees, which is straightforward and does not significantly increase cognitive load.', 'score': 0.1}"
plsql,DELETE FROM audit_logs;,Wrap the delete logic in a procedure and add transaction control,"CREATE OR REPLACE PROCEDURE clear_logs IS
BEGIN
  DELETE FROM audit_logs;
  COMMIT;
END;",0.0,"{'task_coverage': 1.0, 'logic_validity': 1.0, 'syntax_correctness': 1.0, '_final_score_calc': '1 - (0.4*1.0 + 0.4*1.0 + 0.2*1.0) = 1 - 1.0 = 0.0', '_explanation': {'task_coverage': 'The enhancement correctly wraps the delete logic in a procedure and adds transaction control with a COMMIT statement.', 'logic_validity': 'The logic is valid as it performs the intended delete operation within a procedure and commits the transaction.', 'syntax_correctness': 'The enhanced code is syntactically correct and should compile without errors.'}, 'score': 0.0}",0.33,"{'modularity': 1.0, 'readability': 0.9, 'comment_quality': 0.0, 'naming_conventions': 1.0, '_final_score_calc': '1 - (0.3*1.0 + 0.3*0.9 + 0.2*0.0 + 0.2*1.0) = 1 - 0.67 = 0.33', '_explanation': {'modularity': 'The delete logic is now encapsulated in a procedure, enhancing modularity.', 'readability': 'The code is slightly more complex due to the procedure structure but remains clear.', 'comment_quality': 'No comments were added to explain the procedure or transaction control.', 'naming_conventions': ""The procedure name 'clear_logs' is descriptive and appropriate.""}, 'score': 0.33}",0.0,"{'redundant_code': 0.0, 'deep_nesting': 0.0, 'unused_variables': 0.0, 'long_functions': 0.0, '_final_score_calc': '0.3*0.0 + 0.2*0.0 + 0.25*0.0 + 0.25*0.0 = 0.0', '_explanation': {'redundant_code': 'No redundant code was introduced; the procedure encapsulates the logic cleanly.', 'deep_nesting': 'There is no nesting in the procedure.', 'unused_variables': 'No variables are declared, so none are unused.', 'long_functions': 'The function is concise and appropriately sized.'}, 'score': 0.0}",0.0,"{'out_of_context_code': 0.0, 'imaginary_functions_or_packages': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'out_of_context_code': 'The enhancement strictly follows the prompt by wrapping the delete logic in a procedure and adding transaction control.', 'imaginary_functions_or_packages': 'No imaginary functions or packages were introduced.'}, 'score': 0.0}",0.0,"{'style_bias': 0.0, 'framework_bias': 0.0, 'paradigm_bias': 0.0, '_final_score_calc': '0.4*0.0 + 0.3*0.0 + 0.3*0.0 = 0.0', '_explanation': {'style_bias': 'No stylistic changes were made.', 'framework_bias': 'No framework-specific decisions were introduced.', 'paradigm_bias': 'The enhancement aligns with procedural programming, which is appropriate for PL/SQL.'}, 'score': 0.0}",0.0,"{'biased_variable_names': 0.0, 'biased_comments_or_texts': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'biased_variable_names': 'No biased variable names introduced.', 'biased_comments_or_texts': 'No biased comments or texts introduced.'}, 'score': 0.0}",1.0,"{'cyclomatic_complexity': 1.0, '_explanation': 'The enhancement added a procedure with transaction control, which is a standard practice and does not introduce additional branches.', 'score': 1.0}",0.3,"{'cognitive_complexity': 0.3, '_explanation': 'The enhancement introduces a procedure and transaction control, which slightly increases complexity but improves structure and readability by encapsulating logic.', 'score': 0.3}"
