file_extension,prompt,code,functional_correctness_score,functional_correctness_explanation,maintainability_score,maintainability_explanation,code_smells_score,code_smells_explanation,hallucination_score,hallucination_explanation,technical_bias_score,technical_bias_explanation,inherent_bias_score,inherent_bias_explanation,cyclomatic_complexity_score,cyclomatic_complexity_explanation,cognitive_complexity_score,cognitive_complexity_explanation
abap,Write ABAP code to display the current date in SAP GUI,"DATA lv_date TYPE sy-datum.
lv_date = sy-datum.
WRITE: / 'Today''s Date:', lv_date.",0.0,"{'task_coverage': 1.0, 'logic_validity': 1.0, 'syntax_correctness': 1.0, '_final_score_calc': '1 - (0.4*1.0 + 0.4*1.0 + 0.2*1.0) = 1 - 1.0 = 0.0', '_explanation': {'task_coverage': 'The code correctly displays the current date in SAP GUI as requested.', 'logic_validity': 'The logic to assign and display the current date is correctly implemented.', 'syntax_correctness': 'The code is syntactically correct and will execute without errors.'}, 'score': 0.0}",0.53,"{'modularity': 0.2, 'readability': 0.8, 'comment_quality': 0.0, 'naming_conventions': 0.9, '_final_score_calc': '1 - (0.3*0.2 + 0.3*0.8 + 0.2*0.0 + 0.2*0.9) = 1 - 0.47 = 0.53', '_explanation': {'modularity': 'The code is very simple and does not require modularization.', 'readability': 'The code is straightforward and easy to read.', 'comment_quality': 'There are no comments in the code.', 'naming_conventions': ""The variable name 'lv_date' is appropriate for its purpose.""}, 'score': 0.53}",0.0,"{'redundant_code': 0.0, 'deep_nesting': 0.0, 'unused_variables': 0.0, 'long_functions': 0.0, '_final_score_calc': '0.3*0.0 + 0.2*0.0 + 0.25*0.0 + 0.25*0.0 = 0.0', '_explanation': {'redundant_code': 'There is no redundant code in the provided snippet.', 'deep_nesting': 'There is no nesting in the provided snippet.', 'unused_variables': 'All declared variables are used.', 'long_functions': 'There are no functions in the provided snippet.'}, 'score': 0.0}",0.0,"{'out_of_context_code': 0.0, 'imaginary_functions_or_packages': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'out_of_context_code': 'The code is directly related to the task of displaying the current date in SAP GUI.', 'imaginary_functions_or_packages': 'There are no imaginary functions or packages used in the code.'}, 'score': 0.0}",0.0,"{'style_bias': 0.0, 'framework_bias': 0.0, 'paradigm_bias': 0.0, '_final_score_calc': '0.4*0.0 + 0.3*0.0 + 0.3*0.0 = 0.0', '_explanation': {'style_bias': 'The code uses standard ABAP syntax and style for displaying the date.', 'framework_bias': 'No unnecessary frameworks or libraries are used.', 'paradigm_bias': 'The code follows procedural programming, which is appropriate for this task.'}, 'score': 0.0}",0.0,"{'biased_variable_names': 0.0, 'biased_comments_or_texts': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'biased_variable_names': 'No biased variable names detected.', 'biased_comments_or_texts': 'No biased comments or texts detected.'}, 'score': 0.0}",0.0,"{'score': 0.0, '_explanation': 'The code contains no branching structures such as IF statements, loops, or case statements. It is a simple linear sequence of statements.'}",1.0,"{'cognitive_complexity': 0.0, '_explanation': 'The code is straightforward with no nesting or complex logic, making it very easy to understand.'}"
rap,Create a RAP behavior implementation to fetch customer data from ZCUSTOMER,"METHOD read_entity.
SELECT * FROM zcustomer INTO TABLE result.
ENDMETHOD.",0.5,"{'task_coverage': 0.5, 'logic_validity': 0.4, 'syntax_correctness': 0.7, '_final_score_calc': '1 - (0.4*0.5 + 0.4*0.4 + 0.2*0.7) = 1 - 0.5 = 0.5', '_explanation': {'task_coverage': 'The method should be part of a RAP behavior implementation, which is not evident in the code. It only contains a simple SELECT statement without any RAP-specific logic.', 'logic_validity': ""The code does not handle any exceptions or ensure that the data is correctly fetched into the RAP framework's context."", 'syntax_correctness': 'The SELECT statement is syntactically correct, but the method lacks RAP-specific syntax and structure, such as using the correct RAP framework methods.'}, 'score': 0.5}",0.65,"{'modularity': 0.2, 'readability': 0.5, 'comment_quality': 0.0, 'naming_conventions': 0.6, '_final_score_calc': '1 - (0.3*0.2 + 0.3*0.5 + 0.2*0.0 + 0.2*0.6) = 1 - 0.35 = 0.65', '_explanation': {'modularity': 'The method is not modular as it contains a single operation without any decomposition.', 'readability': 'The code is simple but lacks structure and indentation that would improve readability.', 'comment_quality': 'There are no comments to explain the logic or purpose of the code.', 'naming_conventions': 'The method and variable names are generic and do not provide much context.'}, 'score': 0.65}",0.25,"{'redundant_code': 0.0, 'deep_nesting': 0.0, 'unused_variables': 1.0, 'long_functions': 0.0, '_final_score_calc': '0.3*0.0 + 0.2*0.0 + 0.25*1.0 + 0.25*0.0 = 0.25', '_explanation': {'redundant_code': 'No redundant code detected.', 'deep_nesting': 'No deep nesting present.', 'unused_variables': ""The variable 'result' is not declared or used in the method."", 'long_functions': 'The function is very short, consisting of only 2 lines.'}, 'score': 0.25}",1.0,"{'out_of_context_code': 1.0, 'imaginary_functions_or_packages': 1.0, '_final_score_calc': '0.5*1.0 + 0.5*1.0 = 1.0', '_explanation': {'out_of_context_code': 'The code does not implement a RAP behavior implementation as requested in the prompt.', 'imaginary_functions_or_packages': ""The method 'read_entity' is not a standard RAP behavior implementation method.""}, 'score': 1.0}",0.19,"{'style_bias': 0.1, 'framework_bias': 0.2, 'paradigm_bias': 0.3, '_final_score_calc': '0.4*0.1 + 0.3*0.2 + 0.3*0.3 = 0.19', '_explanation': {'style_bias': 'The code uses a straightforward SELECT statement without any stylistic deviations.', 'framework_bias': 'The code does not exhibit any bias towards a specific framework; it uses standard RAP behavior implementation.', 'paradigm_bias': 'The code adheres to procedural programming without introducing unnecessary object-oriented or functional paradigms.'}, 'score': 0.19}",0.0,"{'biased_variable_names': 0.0, 'biased_comments_or_texts': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'biased_variable_names': 'No biased variable names detected.', 'biased_comments_or_texts': 'No biased comments or texts detected.'}, 'score': 0.0}",1.0,"{'cyclomatic_complexity': 0.0, '_explanation': 'The method contains no conditional branches or loops, resulting in a cyclomatic complexity of 1.'}",1.0,"{'cognitive_complexity': 0.1, '_explanation': 'The method is straightforward with a single SQL SELECT statement and no complex logic or nesting.'}"
ui5,Create a UI5 controller to show a message toast when a button is clicked,"sap.ui.define([
  'sap/ui/core/mvc/Controller',
  'sap/m/MessageToast'
], function(Controller, MessageToast) {
  return Controller.extend('demo.controller.Main', {
    onPress: function () {
      MessageToast.show('Button Pressed');
    }
  });
});",0.0,"{'task_coverage': 1.0, 'logic_validity': 1.0, 'syntax_correctness': 1.0, '_final_score_calc': '1 - (0.4*1.0 + 0.4*1.0 + 0.2*1.0) = 1 - 1.0 = 0.0', '_explanation': {'task_coverage': 'The code correctly implements a UI5 controller that shows a message toast when a button is clicked, as specified in the prompt.', 'logic_validity': 'The logic for showing the message toast is correctly implemented using MessageToast.show() within the onPress function.', 'syntax_correctness': 'The code is syntactically correct and uses the appropriate UI5 module definitions and functions.'}, 'score': 0.0}",0.4,"{'modularity': 1.0, 'readability': 1.0, 'comment_quality': 0.0, 'naming_conventions': 1.0, '_final_score_calc': '1 - (0.3*1.0 + 0.3*1.0 + 0.2*0.0 + 0.2*1.0) = 1 - 0.6 = 0.4', '_explanation': {'modularity': 'The code is modular with a clear separation of concerns, defining the controller and its function.', 'readability': 'The code is well-structured and easy to read with proper indentation and spacing.', 'comment_quality': 'There are no comments in the code, which would be helpful for understanding.', 'naming_conventions': 'The naming conventions follow standard practices, making the code easy to understand.'}, 'score': 0.4}",0.0,"{'redundant_code': 0.0, 'deep_nesting': 0.0, 'unused_variables': 0.0, 'long_functions': 0.0, '_final_score_calc': '0.3*0.0 + 0.2*0.0 + 0.25*0.0 + 0.25*0.0 = 0.0', '_explanation': {'redundant_code': 'No redundant code is present.', 'deep_nesting': 'No deep nesting is present.', 'unused_variables': 'No unused variables are present.', 'long_functions': 'No long functions are present.'}, 'score': 0.0}",1.0,"{'out_of_context_code': 1.0, 'imaginary_functions_or_packages': 1.0, '_final_score_calc': '0.5*1.0 + 0.5*1.0 = 1.0', '_explanation': {'out_of_context_code': 'All code is relevant to the prompt, which requires showing a message toast on button click.', 'imaginary_functions_or_packages': ""No imaginary functions or packages are used; 'MessageToast.show' is a valid UI5 function.""}, 'score': 1.0}",0.0,"{'style_bias': 0.0, 'framework_bias': 0.0, 'paradigm_bias': 0.0, '_final_score_calc': '0.4*0.0 + 0.3*0.0 + 0.3*0.0 = 0.0', '_explanation': {'style_bias': 'The code follows standard UI5 style conventions without deviation.', 'framework_bias': 'The code correctly uses UI5 framework components without unnecessary imports or usage.', 'paradigm_bias': 'The code adheres to the MVC paradigm as expected for a UI5 application.'}, 'score': 0.0}",0.0,"{'biased_variable_names': 0.0, 'biased_comments_or_texts': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'biased_variable_names': 'No biased variable names detected.', 'biased_comments_or_texts': 'No biased comments or texts detected.'}, 'score': 0.0}",0.0,"{'score': 0.0, '_explanation': 'The code contains no conditional branches or loops, resulting in a cyclomatic complexity of 1.'}",1.0,"{'cognitive_complexity': 0.0, '_explanation': 'The code is straightforward with a single function and no nesting or complex logic.'}"
sql,Write a SQL query to retrieve names and emails of active users,"SELECT name, email FROM users WHERE status = 'active';",0.0,"{'task_coverage': 1.0, 'logic_validity': 1.0, 'syntax_correctness': 1.0, '_final_score_calc': '1 - (0.4*1.0 + 0.4*1.0 + 0.2*1.0) = 1 - 1.0 = 0.0', '_explanation': {'task_coverage': 'The query correctly retrieves names and emails of active users as specified in the prompt.', 'logic_validity': ""The logic of filtering users with 'status = active' is correctly implemented."", 'syntax_correctness': 'The SQL syntax is correct and will execute without errors.'}, 'score': 0.0}",0.5,"{'modularity': 0.0, 'readability': 1.0, 'comment_quality': 0.0, 'naming_conventions': 1.0, '_final_score_calc': '1 - (0.3*0.0 + 0.3*1.0 + 0.2*0.0 + 0.2*1.0) = 1 - 0.5 = 0.5', '_explanation': {'modularity': 'The SQL query is a single statement and does not involve any modular components.', 'readability': 'The query is simple and easy to read with clear structure.', 'comment_quality': 'There are no comments in the query.', 'naming_conventions': ""The column names 'name' and 'email' are clear and descriptive.""}, 'score': 0.5}",0.0,"{'redundant_code': 0.0, 'deep_nesting': 0.0, 'unused_variables': 0.0, 'long_functions': 0.0, '_final_score_calc': '0.3*0.0 + 0.2*0.0 + 0.25*0.0 + 0.25*0.0 = 0.0', '_explanation': {'redundant_code': 'No redundant code present.', 'deep_nesting': 'No deep nesting present.', 'unused_variables': 'No unused variables present.', 'long_functions': 'No long functions present.'}, 'score': 0.0}",1.0,"{'out_of_context_code': 1.0, 'imaginary_functions_or_packages': 1.0, '_final_score_calc': '0.5*1.0 + 0.5*1.0 = 1.0', '_explanation': {'out_of_context_code': 'The code directly addresses the prompt without introducing unrelated logic.', 'imaginary_functions_or_packages': 'The query uses standard SQL syntax and functions without inventing any non-existent functions or packages.'}, 'score': 1.0}",0.0,"{'style_bias': 0.0, 'framework_bias': 0.0, 'paradigm_bias': 0.0, '_final_score_calc': '0.4*0.0 + 0.3*0.0 + 0.3*0.0 = 0.0', '_explanation': {'style_bias': 'The query uses standard SQL syntax without any stylistic bias.', 'framework_bias': 'The query does not rely on any specific SQL framework or extensions.', 'paradigm_bias': 'The query adheres to standard SQL paradigms without deviation.'}, 'score': 0.0}",0.0,"{'biased_variable_names': 0.0, 'biased_comments_or_texts': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'biased_variable_names': 'No biased variable names detected.', 'biased_comments_or_texts': 'No biased comments or texts detected.'}, 'score': 0.0}",0.0,"{'score': 0.0, '_explanation': 'The SQL query contains a single WHERE clause, which is a simple conditional branch. There are no loops or complex control structures.'}",1.0,"{'cognitive_complexity': 0.0, '_explanation': 'The query is straightforward with a simple SELECT statement and a single WHERE clause, making it very easy to understand.'}"
plsql,Write a PL/SQL procedure to grant 10% bonus to high performers,"CREATE OR REPLACE PROCEDURE update_bonus IS
BEGIN
  UPDATE employees SET bonus = salary * 0.10 WHERE performance_rating = 'A';
  COMMIT;
END;",0.08,"{'task_coverage': 0.9, 'logic_validity': 0.9, 'syntax_correctness': 1.0, '_final_score_calc': '1 - (0.4*0.9 + 0.4*0.9 + 0.2*1.0) = 1 - 0.92 = 0.08', '_explanation': {'task_coverage': ""The procedure correctly updates the bonus for high performers, assuming 'A' is the high performance rating."", 'logic_validity': ""The logic assumes that 'A' is the only high performance rating, which may not cover all cases if there are multiple high ratings."", 'syntax_correctness': 'The code is syntactically correct and should execute without errors.'}, 'score': 0.08}",0.46,"{'modularity': 0.5, 'readability': 0.8, 'comment_quality': 0.2, 'naming_conventions': 0.7, '_final_score_calc': '1 - (0.3*0.5 + 0.3*0.8 + 0.2*0.2 + 0.2*0.7) = 1 - 0.54 = 0.46', '_explanation': {'modularity': 'The procedure is simple and does not break down tasks into smaller functions.', 'readability': 'The code is straightforward and easy to follow, with clear logic.', 'comment_quality': 'There are no comments explaining the purpose or logic of the code.', 'naming_conventions': 'The procedure name is descriptive, but there is room for improvement in variable naming.'}, 'score': 0.46}",0.0,"{'redundant_code': 0.0, 'deep_nesting': 0.0, 'unused_variables': 0.0, 'long_functions': 0.0, '_final_score_calc': '0.3*0.0 + 0.2*0.0 + 0.25*0.0 + 0.25*0.0 = 0.0', '_explanation': {'redundant_code': 'There is no redundant code in the procedure.', 'deep_nesting': 'There is no deep nesting in the procedure.', 'unused_variables': 'There are no unused variables in the procedure.', 'long_functions': 'The function is not long; it consists of only a few lines.'}, 'score': 0.0}",0.1,"{'out_of_context_code': 0.2, 'imaginary_functions_or_packages': 0.0, '_final_score_calc': '0.5*0.2 + 0.5*0.0 = 0.1 = 0.10', '_explanation': {'out_of_context_code': ""The code assumes a specific table structure and column names ('employees', 'bonus', 'salary', 'performance_rating') without this being specified in the prompt."", 'imaginary_functions_or_packages': 'No imaginary functions or packages are used in the code.'}, 'score': 0.1}",0.0,"{'style_bias': 0.0, 'framework_bias': 0.0, 'paradigm_bias': 0.0, '_final_score_calc': '0.4*0.0 + 0.3*0.0 + 0.3*0.0 = 0.0', '_explanation': {'style_bias': 'The code follows standard PL/SQL syntax and style without unnecessary complexity.', 'framework_bias': 'There is no use of any specific framework or unnecessary libraries.', 'paradigm_bias': 'The procedure is written in a straightforward procedural style appropriate for PL/SQL.'}, 'score': 0.0}",0.0,"{'biased_variable_names': 0.0, 'biased_comments_or_texts': 0.0, '_final_score_calc': '0.5*0.0 + 0.5*0.0 = 0.0', '_explanation': {'biased_variable_names': 'No biased variable names detected.', 'biased_comments_or_texts': 'No biased comments or texts detected.'}, 'score': 0.0}",0.0,"{'cyclomatic_complexity': 0.0, '_explanation': 'The procedure contains a single SQL UPDATE statement with no conditional branches or loops.', 'score': 0.0}",1.0,"{'cognitive_complexity': 0.0, '_explanation': 'The procedure is straightforward with a single SQL update statement and no complex logic or nesting.'}"
