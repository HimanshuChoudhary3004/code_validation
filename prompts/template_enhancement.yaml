functional_correctness:
  description: >
    Evaluates whether the enhanced {{lang}} code correctly preserves or improves the logic described in the enhancement prompt, while remaining consistent with the original code.

    Scoring Breakdown:
    - **task_coverage** (40%): Does the enhancement fulfill all functional requirements of the enhancement prompt?
    - **logic_validity** (40%): Are the enhanced conditions, logic blocks, and flows correct?
    - **syntax_correctness** (20%): Is the syntax valid and error-free?

  weight_map:
    task_coverage: 0.4
    logic_validity: 0.4
    syntax_correctness: 0.2

  prompt: |
    [KPI: Functional Correctness (Enhancement Mode)]
    {{description}}

    Original Code:
    {{original_code}}

    Enhancement Prompt:
    {{enhancement_prompt}}

    Enhanced Code:
    {{enhanced_code}}

    Instructions:
    - Assign scores (0â€“1) for each parameter.
    - Provide detailed justifications per parameter.
    - Highlight what changed and how well the change matches the enhancement prompt.
    - Compute final_score = 1 - (0.4 * task_coverage + 0.4 * logic_validity + 0.2 * syntax_correctness)

    Return format:
    Return only a raw, properly structured JSON object without any markdown, headings, code blocks, or explanatory text outside the JSON.

    Example:
    {
      "task_coverage": 0.9,
      "logic_validity": 0.7,
      "syntax_correctness": 1.0,
      "_final_score_calc": "1 - (0.4*0.9 + 0.4*0.7 + 0.2*1.0) = 1 - 0.82 = 0.18",
      "_explanation": {
        "task_coverage": "Loop was optimized as requested, but log statement was skipped.",
        "logic_validity": "The logic structure was mostly preserved, but conditional evaluation could fail in edge cases.",
        "syntax_correctness": "The enhanced code compiles correctly."
      }
    }
    Make sure the response contains a top-level key called "score" (float between 0.0 and 1.0).


maintainability:
  description: >
    Evaluates if the enhancement made the code more readable, understandable, and maintainable.

    Scoring Breakdown:
    - **modularity** (30%): Is the enhanced logic more logically segmented?
    - **readability** (30%): Are formatting and naming improved?
    - **comment_quality** (20%): Are new or updated comments clear and useful?
    - **naming_conventions** (20%): Are naming styles consistent and meaningful?

  weight_map:
    modularity: 0.3
    readability: 0.3
    comment_quality: 0.2
    naming_conventions: 0.2

  prompt: |
    [KPI: Maintainability (Enhancement Mode)]
    {{description}}

    Original Code:
    {{original_code}}

    Enhancement Prompt:
    {{enhancement_prompt}}

    Enhanced Code:
    {{enhanced_code}}

    Instructions:
    - Compare pre/post enhancement.
    - Provide score per sub-metric.
    - Explain how the enhancement affected code maintainability.
    - Compute final_score = 1 - (0.3 * modularity + 0.3 * readability + 0.2 * comment_quality + 0.2 * naming_conventions)
    

    Return format:
    Return only a raw, properly structured JSON object without any markdown, headings, code blocks, or explanatory text outside the JSON.

    Example:
    {
      "modularity": 0.8,
      "readability": 0.9,
      "comment_quality": 0.5,
      "naming_conventions": 1.0,
      "_final_score_calc": "1 - (0.3*0.8 + 0.3*0.9 + 0.2*0.5 + 0.2*1.0) = 1 - 0.78 = 0.22",
      "_explanation": {
        "modularity": "Extracted nested logic into helper functions.",
        "readability": "Improved indentation and reduced line clutter.",
        "comment_quality": "Old comments retained, no new ones added.",
        "naming_conventions": "New variables use descriptive names."
      }
    }
    Make sure the response contains a top-level key called "score" (float between 0.0 and 1.0).


code_smells:
  description: >
    Checks if any anti-patterns were introduced or resolved in the enhancement.

    Scoring Breakdown:
    - **redundant_code** (30%)
    - **deep_nesting** (20%)
    - **unused_variables** (25%)
    - **long_functions** (25%)

  weight_map:
    redundant_code: 0.3
    deep_nesting: 0.2
    unused_variables: 0.25
    long_functions: 0.25

  prompt: |
    [KPI: Code Smells (Enhancement Mode)]
    {{description}}

    Original Code:
    {{original_code}}

    Enhancement Prompt:
    {{enhancement_prompt}}

    Enhanced Code:
    {{enhanced_code}}

    Instructions:
    - Detect if enhancement reduced or added code smells.
    - Score each and justify.
    - Explain in detail using lines or sections.
    - Compute final_score = 0.3 * redundant_code + 0.2 * deep_nesting + 0.25 * unused_variables + 0.25 * long_functions

    Return format:
    Return only a raw, properly structured JSON object without any markdown, headings, code blocks, or explanatory text outside the JSON.

    Example:
    {
      "redundant_code": 0.1,
      "deep_nesting": 0.2,
      "unused_variables": 0.0,
      "long_functions": 0.3,
      "_final_score_calc": "0.3*0.1 + 0.2*0.2 + 0.25*0.0 + 0.25*0.3 = 0.155",
      "_explanation": {
        "redundant_code": "Duplicate logic removed from lines 10 and 12.",
        "deep_nesting": "Two nested IFs replaced with early return.",
        "unused_variables": "All declared variables are used.",
        "long_functions": "Function still long but more readable."
      }
    }
    Make sure the response contains a top-level key called "score" (float between 0.0 and 1.0).


hallucination:
  description: >
    Checks if enhancement added unnecessary, fabricated, or out-of-context logic.

    Scoring Breakdown:
    - **out_of_context_code** (50%)
    - **imaginary_functions_or_packages** (50%)

  weight_map:
    out_of_context_code: 0.5
    imaginary_functions_or_packages: 0.5

  prompt: |
    [KPI: Hallucination (Enhancement Mode)]
    {{description}}

    Original Code:
    {{original_code}}

    Enhancement Prompt:
    {{enhancement_prompt}}

    Enhanced Code:
    {{enhanced_code}}

    Instructions:
    - Flag fabricated logic or APIs not needed or unrelated to enhancement.
    - Provide final_score and justifications.
    - Compute final_score = 0.5 * out_of_context_code + 0.5 * imaginary_functions_or_packages

    Return format:
    Return only a raw, properly structured JSON object without any markdown, headings, code blocks, or explanatory text outside the JSON.

    Example:
    {
      "out_of_context_code": 0.9,
      "imaginary_functions_or_packages": 0.7,
      "_final_score_calc": "0.5*0.9 + 0.5*0.7 = 0.8",
      "_explanation": {
        "out_of_context_code": "Added validation logic not required in enhancement.",
        "imaginary_functions_or_packages": "Used 'autoBindEncrypt()' which is non-standard."
      }
    }
    Make sure the response contains a top-level key called "score" (float between 0.0 and 1.0).


technical_bias:
  description: >
    Checks if the enhancement introduces stylistic or architectural bias.

    Scoring Breakdown:
    - **style_bias** (40%)
    - **framework_bias** (30%)
    - **paradigm_bias** (30%)

  weight_map:
    style_bias: 0.4
    framework_bias: 0.3
    paradigm_bias: 0.3

  prompt: |
    [KPI: Technical Bias (Enhancement Mode)]
    {{description}}

    Original Code:
    {{original_code}}

    Enhancement Prompt:
    {{enhancement_prompt}}

    Enhanced Code:
    {{enhanced_code}}

    Instructions:
    - Identify if stylistic/paradigm/framework decisions were added without justification.
    - Mention type of bias if found.
    - compute final_score = 0.4 * style_bias + 0.3 * framework_bias + 0.3 * paradigm_bias

    Return format:
    Return only a raw, properly structured JSON object without any markdown, headings, code blocks, or explanatory text outside the JSON.

    Example:
    {
      "style_bias": 0.6,
      "framework_bias": 0.4,
      "paradigm_bias": 0.3,
      "_final_score_calc": "0.4*0.6 + 0.3*0.4 + 0.3*0.3 = 0.45",
      "_explanation": {
        "style_bias": "Forced use of streams instead of loops.",
        "framework_bias": "Added dependency on 'Requests' library not required.",
        "paradigm_bias": "Converted to OOP when enhancement was logic-only."
      }
    }
    Make sure the response contains a top-level key called "score" (float between 0.0 and 1.0).


inherent_bias:
  description: >
    Detects if the enhancement introduces or preserves biased constructs.

    Scoring Breakdown:
    - **biased_variable_names** (50%)
    - **biased_comments_or_texts** (50%)

  weight_map:
    biased_variable_names: 0.5
    biased_comments_or_texts: 0.5

  prompt: |
    [KPI: Inherent Bias (Enhancement Mode)]
    {{description}}

    Original Code:
    {{original_code}}

    Enhancement Prompt:
    {{enhancement_prompt}}

    Enhanced Code:
    {{enhanced_code}}

    Instructions:
    - Highlight any biased terms or phrases introduced in enhancement.
    - Label type of bias found (gender, racial, cultural, etc.)
    - compute final_score = 0.5 * biased_variable_names + 0.5 * biased_comments_or_texts

    Return format:
    Return only a raw, properly structured JSON object without any markdown, headings, code blocks, or explanatory text outside the JSON.

    Example:
    {
      "biased_variable_names": 0.7,
      "biased_comments_or_texts": 0.5,
      "_final_score_calc": "0.5*0.7 + 0.5*0.5 = 0.6",
      "_explanation": {
        "biased_variable_names": "'he_leadCount' introduced, which is gendered.",
        "biased_comments_or_texts": "Comment at line 14 refers to 'third-world' countries."
      }
    }
    Make sure the response contains a top-level key called "score" (float between 0.0 and 1.0).


cyclomatic_complexity:
  description: >
    Evaluates if enhancement increases control path complexity significantly.

  prompt: |
    [KPI: Cyclomatic Complexity (Enhancement Mode)]
    Original Code:
    {{original_code}}

    Enhancement Prompt:
    {{enhancement_prompt}}

    Enhanced Code:
    {{enhanced_code}}

    Instructions:
    - Estimate branch complexity.
    - If enhancement increases complexity disproportionately, reflect that in score.
    - compute final_score = cyclomatic_complexity

    Return format:
    Return only a raw, properly structured JSON object without any markdown, headings, code blocks, or explanatory text outside the JSON.

    Example:
    {
      "cyclomatic_complexity": 0.8,
      "_explanation": "Enhancement added multiple nested branches without simplification."
    }
    Make sure the response contains a top-level key called "score" (float between 0.0 and 1.0).


cognitive_complexity:
  description: >
    Measures if the enhanced code is harder to follow due to deeper nesting, mental jumps, or indirect logic.

  prompt: |
    [KPI: Cognitive Complexity (Enhancement Mode)]
    Original Code:
    {{original_code}}

    Enhancement Prompt:
    {{enhancement_prompt}}

    Enhanced Code:
    {{enhanced_code}}

    Instructions:
    - Evaluate based on readability, naming, control structure, and mental effort.
    - Justify score.
    - compute final_score = cognitive_complexity

    Return format:
    Return only a raw, properly structured JSON object without any markdown, headings, code blocks, or explanatory text outside the JSON.

    Example:
    {
      "cognitive_complexity": 0.65,
      "_explanation": "Enhancement added ternary inside a loop, increasing reader confusion."
    }
    Make sure the response contains a top-level key called "score" (float between 0.0 and 1.0).

